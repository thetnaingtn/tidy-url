// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/shortener.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TidyUrlService_MakeTidyUrl_FullMethodName   = "/api.v1.TidyUrlService/MakeTidyUrl"
	TidyUrlService_ExpandTidyUrl_FullMethodName = "/api.v1.TidyUrlService/ExpandTidyUrl"
	TidyUrlService_GetTidyUrl_FullMethodName    = "/api.v1.TidyUrlService/GetTidyUrl"
)

// TidyUrlServiceClient is the client API for TidyUrlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TidyUrlServiceClient interface {
	MakeTidyUrl(ctx context.Context, in *MakeTidyUrlRequest, opts ...grpc.CallOption) (*MakeTidyUrlResponse, error)
	ExpandTidyUrl(ctx context.Context, in *ExpandTidyUrlRequest, opts ...grpc.CallOption) (*ExpandTidyUrlResponse, error)
	GetTidyUrl(ctx context.Context, in *GetTidyUrlRequest, opts ...grpc.CallOption) (*TidyUrl, error)
}

type tidyUrlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTidyUrlServiceClient(cc grpc.ClientConnInterface) TidyUrlServiceClient {
	return &tidyUrlServiceClient{cc}
}

func (c *tidyUrlServiceClient) MakeTidyUrl(ctx context.Context, in *MakeTidyUrlRequest, opts ...grpc.CallOption) (*MakeTidyUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeTidyUrlResponse)
	err := c.cc.Invoke(ctx, TidyUrlService_MakeTidyUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tidyUrlServiceClient) ExpandTidyUrl(ctx context.Context, in *ExpandTidyUrlRequest, opts ...grpc.CallOption) (*ExpandTidyUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpandTidyUrlResponse)
	err := c.cc.Invoke(ctx, TidyUrlService_ExpandTidyUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tidyUrlServiceClient) GetTidyUrl(ctx context.Context, in *GetTidyUrlRequest, opts ...grpc.CallOption) (*TidyUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TidyUrl)
	err := c.cc.Invoke(ctx, TidyUrlService_GetTidyUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TidyUrlServiceServer is the server API for TidyUrlService service.
// All implementations must embed UnimplementedTidyUrlServiceServer
// for forward compatibility.
type TidyUrlServiceServer interface {
	MakeTidyUrl(context.Context, *MakeTidyUrlRequest) (*MakeTidyUrlResponse, error)
	ExpandTidyUrl(context.Context, *ExpandTidyUrlRequest) (*ExpandTidyUrlResponse, error)
	GetTidyUrl(context.Context, *GetTidyUrlRequest) (*TidyUrl, error)
	mustEmbedUnimplementedTidyUrlServiceServer()
}

// UnimplementedTidyUrlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTidyUrlServiceServer struct{}

func (UnimplementedTidyUrlServiceServer) MakeTidyUrl(context.Context, *MakeTidyUrlRequest) (*MakeTidyUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeTidyUrl not implemented")
}
func (UnimplementedTidyUrlServiceServer) ExpandTidyUrl(context.Context, *ExpandTidyUrlRequest) (*ExpandTidyUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandTidyUrl not implemented")
}
func (UnimplementedTidyUrlServiceServer) GetTidyUrl(context.Context, *GetTidyUrlRequest) (*TidyUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTidyUrl not implemented")
}
func (UnimplementedTidyUrlServiceServer) mustEmbedUnimplementedTidyUrlServiceServer() {}
func (UnimplementedTidyUrlServiceServer) testEmbeddedByValue()                        {}

// UnsafeTidyUrlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TidyUrlServiceServer will
// result in compilation errors.
type UnsafeTidyUrlServiceServer interface {
	mustEmbedUnimplementedTidyUrlServiceServer()
}

func RegisterTidyUrlServiceServer(s grpc.ServiceRegistrar, srv TidyUrlServiceServer) {
	// If the following call pancis, it indicates UnimplementedTidyUrlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TidyUrlService_ServiceDesc, srv)
}

func _TidyUrlService_MakeTidyUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTidyUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TidyUrlServiceServer).MakeTidyUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TidyUrlService_MakeTidyUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TidyUrlServiceServer).MakeTidyUrl(ctx, req.(*MakeTidyUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TidyUrlService_ExpandTidyUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandTidyUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TidyUrlServiceServer).ExpandTidyUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TidyUrlService_ExpandTidyUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TidyUrlServiceServer).ExpandTidyUrl(ctx, req.(*ExpandTidyUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TidyUrlService_GetTidyUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTidyUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TidyUrlServiceServer).GetTidyUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TidyUrlService_GetTidyUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TidyUrlServiceServer).GetTidyUrl(ctx, req.(*GetTidyUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TidyUrlService_ServiceDesc is the grpc.ServiceDesc for TidyUrlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TidyUrlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.TidyUrlService",
	HandlerType: (*TidyUrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeTidyUrl",
			Handler:    _TidyUrlService_MakeTidyUrl_Handler,
		},
		{
			MethodName: "ExpandTidyUrl",
			Handler:    _TidyUrlService_ExpandTidyUrl_Handler,
		},
		{
			MethodName: "GetTidyUrl",
			Handler:    _TidyUrlService_GetTidyUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/shortener.proto",
}
