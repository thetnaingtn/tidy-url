// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/shortener.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api.v1";

export interface ShortenUrlRequest {
  longUrl: string;
}

export interface ShortenUrlResponse {
  shortUrl: string;
}

function createBaseShortenUrlRequest(): ShortenUrlRequest {
  return { longUrl: "" };
}

export const ShortenUrlRequest: MessageFns<ShortenUrlRequest> = {
  encode(message: ShortenUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.longUrl !== "") {
      writer.uint32(10).string(message.longUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShortenUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortenUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.longUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ShortenUrlRequest>): ShortenUrlRequest {
    return ShortenUrlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShortenUrlRequest>): ShortenUrlRequest {
    const message = createBaseShortenUrlRequest();
    message.longUrl = object.longUrl ?? "";
    return message;
  },
};

function createBaseShortenUrlResponse(): ShortenUrlResponse {
  return { shortUrl: "" };
}

export const ShortenUrlResponse: MessageFns<ShortenUrlResponse> = {
  encode(message: ShortenUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortUrl !== "") {
      writer.uint32(10).string(message.shortUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShortenUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortenUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shortUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ShortenUrlResponse>): ShortenUrlResponse {
    return ShortenUrlResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShortenUrlResponse>): ShortenUrlResponse {
    const message = createBaseShortenUrlResponse();
    message.shortUrl = object.shortUrl ?? "";
    return message;
  },
};

export type UrlShortenerDefinition = typeof UrlShortenerDefinition;
export const UrlShortenerDefinition = {
  name: "UrlShortener",
  fullName: "api.v1.UrlShortener",
  methods: {
    shortenUrl: {
      name: "ShortenUrl",
      requestType: ShortenUrlRequest,
      requestStream: false,
      responseType: ShortenUrlResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [new Uint8Array([16, 58, 1, 42, 34, 11, 47, 118, 49, 47, 115, 104, 111, 114, 116, 101, 110])],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
