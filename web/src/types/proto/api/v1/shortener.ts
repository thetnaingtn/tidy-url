// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/shortener.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "api.v1";

export interface MakeTidyUrlRequest {
  longUrl: string;
}

export interface MakeTidyUrlResponse {
  tidyUrl: string;
}

export interface TidyUrl {
  id: string;
  longUrl: string;
  encodedStr: string;
  createdAt?: Date | undefined;
}

export interface ExpandTidyUrlRequest {
  id: string;
}

export interface ExpandTidyUrlResponse {
  longUrl: string;
}

export interface GetTidyUrlRequest {
  id: string;
}

function createBaseMakeTidyUrlRequest(): MakeTidyUrlRequest {
  return { longUrl: "" };
}

export const MakeTidyUrlRequest: MessageFns<MakeTidyUrlRequest> = {
  encode(message: MakeTidyUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.longUrl !== "") {
      writer.uint32(10).string(message.longUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MakeTidyUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMakeTidyUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.longUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MakeTidyUrlRequest>): MakeTidyUrlRequest {
    return MakeTidyUrlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MakeTidyUrlRequest>): MakeTidyUrlRequest {
    const message = createBaseMakeTidyUrlRequest();
    message.longUrl = object.longUrl ?? "";
    return message;
  },
};

function createBaseMakeTidyUrlResponse(): MakeTidyUrlResponse {
  return { tidyUrl: "" };
}

export const MakeTidyUrlResponse: MessageFns<MakeTidyUrlResponse> = {
  encode(message: MakeTidyUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tidyUrl !== "") {
      writer.uint32(10).string(message.tidyUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MakeTidyUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMakeTidyUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tidyUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MakeTidyUrlResponse>): MakeTidyUrlResponse {
    return MakeTidyUrlResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MakeTidyUrlResponse>): MakeTidyUrlResponse {
    const message = createBaseMakeTidyUrlResponse();
    message.tidyUrl = object.tidyUrl ?? "";
    return message;
  },
};

function createBaseTidyUrl(): TidyUrl {
  return { id: "", longUrl: "", encodedStr: "", createdAt: undefined };
}

export const TidyUrl: MessageFns<TidyUrl> = {
  encode(message: TidyUrl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.longUrl !== "") {
      writer.uint32(18).string(message.longUrl);
    }
    if (message.encodedStr !== "") {
      writer.uint32(26).string(message.encodedStr);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TidyUrl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTidyUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.longUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encodedStr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<TidyUrl>): TidyUrl {
    return TidyUrl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TidyUrl>): TidyUrl {
    const message = createBaseTidyUrl();
    message.id = object.id ?? "";
    message.longUrl = object.longUrl ?? "";
    message.encodedStr = object.encodedStr ?? "";
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseExpandTidyUrlRequest(): ExpandTidyUrlRequest {
  return { id: "" };
}

export const ExpandTidyUrlRequest: MessageFns<ExpandTidyUrlRequest> = {
  encode(message: ExpandTidyUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandTidyUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandTidyUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ExpandTidyUrlRequest>): ExpandTidyUrlRequest {
    return ExpandTidyUrlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandTidyUrlRequest>): ExpandTidyUrlRequest {
    const message = createBaseExpandTidyUrlRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseExpandTidyUrlResponse(): ExpandTidyUrlResponse {
  return { longUrl: "" };
}

export const ExpandTidyUrlResponse: MessageFns<ExpandTidyUrlResponse> = {
  encode(message: ExpandTidyUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.longUrl !== "") {
      writer.uint32(10).string(message.longUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandTidyUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandTidyUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.longUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ExpandTidyUrlResponse>): ExpandTidyUrlResponse {
    return ExpandTidyUrlResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandTidyUrlResponse>): ExpandTidyUrlResponse {
    const message = createBaseExpandTidyUrlResponse();
    message.longUrl = object.longUrl ?? "";
    return message;
  },
};

function createBaseGetTidyUrlRequest(): GetTidyUrlRequest {
  return { id: "" };
}

export const GetTidyUrlRequest: MessageFns<GetTidyUrlRequest> = {
  encode(message: GetTidyUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTidyUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTidyUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetTidyUrlRequest>): GetTidyUrlRequest {
    return GetTidyUrlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTidyUrlRequest>): GetTidyUrlRequest {
    const message = createBaseGetTidyUrlRequest();
    message.id = object.id ?? "";
    return message;
  },
};

export type TidyUrlServiceDefinition = typeof TidyUrlServiceDefinition;
export const TidyUrlServiceDefinition = {
  name: "TidyUrlService",
  fullName: "api.v1.TidyUrlService",
  methods: {
    makeTidyUrl: {
      name: "MakeTidyUrl",
      requestType: MakeTidyUrlRequest,
      requestStream: false,
      responseType: MakeTidyUrlResponse,
      responseStream: false,
      options: {
        _unknownFields: { 578365826: [new Uint8Array([13, 58, 1, 42, 34, 8, 47, 118, 49, 47, 116, 105, 100, 121])] },
      },
    },
    expandTidyUrl: {
      name: "ExpandTidyUrl",
      requestType: ExpandTidyUrlRequest,
      requestStream: false,
      responseType: ExpandTidyUrlResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([17, 18, 15, 47, 118, 49, 47, 101, 120, 112, 97, 110, 100, 47, 123, 105, 100, 125]),
          ],
        },
      },
    },
    getTidyUrl: {
      name: "GetTidyUrl",
      requestType: GetTidyUrlRequest,
      requestStream: false,
      responseType: TidyUrl,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [new Uint8Array([15, 18, 13, 47, 118, 49, 47, 116, 105, 100, 121, 47, 123, 105, 100, 125])],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
